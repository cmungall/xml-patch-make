--- make-4.1/original/function.c	2015-07-24 14:26:58.842270424 +0200
+++ make-4.1/make-4.1/function.c	2015-07-27 10:03:22.790103884 +0200
@@ -14,19 +14,14 @@
 You should have received a copy of the GNU General Public License along with
 this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
-#include "makeint.h"
-#include "filedef.h"
-#include "variable.h"
-#include "dep.h"
-#include "job.h"
-#include "commands.h"
-#include "debug.h"
+#include "xml.h"
 
 #ifdef _AMIGA
 #include "amiga.h"
 #endif
 
 
+
 struct function_table_entry
   {
     union {
@@ -1130,7 +1125,7 @@
       outputs (0, msg);
       outputs (0, "\n");
       break;
-
+      
     default:
       OS (fatal, *expanding_var, "Internal error: func_error: '%s'", funcname);
     }
@@ -1139,6 +1134,41 @@
   return o;
 }
 
+/*
+  xml description
+*/
+static char *
+func_description (char *o, char **argv, const char *funcname)
+{
+
+ if(xml_file!=NULL)
+ 	{
+	xml_description(argv[0],argv[1]);
+ 	}
+  
+	 
+
+  /* The description function expands to the empty string.  */
+  return o;
+}
+static char* slurm_proc(char *o, char **argv, const char *funcname)
+{
+ if(xml_file!=NULL)
+ 	{
+	NodeMetadataPtr meta =  xml_find_metadata(argv[0],1);
+	if(meta!=NULL) meta->n_proc = atoi(argv[1]);
+ 	}
+  return o;
+}
+static char* slurm_core(char *o, char **argv, const char *funcname)
+{
+ if(xml_file!=NULL)
+ 	{
+	NodeMetadataPtr meta =  xml_find_metadata(argv[0],1);
+	if(meta!=NULL) meta->n_core = atoi(argv[1]);
+ 	}
+  return o;
+}
 
 /*
   chop argv[0] into words, and sort them.
@@ -2296,6 +2326,9 @@
   FT_ENTRY ("info",          0,  1,  1,  func_error),
   FT_ENTRY ("error",         0,  1,  1,  func_error),
   FT_ENTRY ("warning",       0,  1,  1,  func_error),
+  FT_ENTRY ("description",   2,  2,  1,  func_description),
+  FT_ENTRY ("n-core",        2,  2,  1,  slurm_core),
+  FT_ENTRY ("n-proc",        2,  2,  1,  slurm_proc),
   FT_ENTRY ("if",            2,  3,  0,  func_if),
   FT_ENTRY ("or",            1,  0,  0,  func_or),
   FT_ENTRY ("and",           1,  0,  0,  func_and),
--- make-4.1/original/job.c	2015-07-24 14:26:58.838270409 +0200
+++ make-4.1/make-4.1/job.c	2015-07-24 14:27:17.626363573 +0200
@@ -17,15 +17,10 @@
 #include "makeint.h"
 
 #include <assert.h>
+#include <string.h>
+#include "xml.h"
 
-#include "job.h"
-#include "debug.h"
-#include "filedef.h"
-#include "commands.h"
-#include "variable.h"
-#include "debug.h"
 
-#include <string.h>
 
 /* Default shell to use.  */
 #ifdef WINDOWS32
@@ -1724,7 +1719,7 @@
       waiting_jobs = c;
       return 0;
     }
-
+  xml_visit(c);
   /* Start the first command; reap_children will run later command lines.  */
   start_job_command (c);
 
--- make-4.1/original/main.c	2015-07-24 14:26:58.842270424 +0200
+++ make-4.1/make-4.1/main.c	2015-07-24 14:27:17.626363573 +0200
@@ -24,6 +24,7 @@
 #include "debug.h"
 #include "getopt.h"
 
+
 #include <assert.h>
 #ifdef _AMIGA
 # include <dos/dos.h>
@@ -276,6 +277,11 @@
 /* List of strings to be eval'd.  */
 static struct stringlist *eval_strings = 0;
 
+/* xml output.  */
+static struct stringlist *xml_output = 0;
+FILE* xml_file = NULL;
+
+
 /* If nonzero, we should just print usage and exit.  */
 
 static int print_usage_flag = 0;
@@ -383,6 +389,8 @@
                               Consider FILE to be infinitely new.\n"),
     N_("\
   --warn-undefined-variables  Warn when an undefined variable is referenced.\n"),
+    N_("\
+  -X, --xml                   Xml output.\n"),
     NULL
   };
 
@@ -435,7 +443,8 @@
     { 'o', filename, &old_files, 0, 0, 0, 0, 0, "old-file" },
     { 'O', string, &output_sync_option, 1, 1, 0, "target", 0, "output-sync" },
     { 'W', filename, &new_files, 0, 0, 0, 0, 0, "what-if" },
-
+	{ 'X', filename, &xml_output, 0, 0, 0, 0, 0, "xml" },
+	
     /* These are long-style options.  */
     { CHAR_MAX+1, strlist, &db_flags, 1, 1, 0, "basic", 0, "debug" },
     { CHAR_MAX+2, string, &jobserver_fds, 1, 1, 0, 0, 0, "jobserver-fds" },
@@ -1452,6 +1461,32 @@
   if (ISDB (DB_BASIC))
     print_version ();
 
+ if (xml_output != 0)
+    {
+    silent_flag = 1;
+    just_print_flag = 1;
+    print_data_base_flag = 0;
+    question_flag = 0;
+    job_slots = 1;
+    always_make_flag = 1;
+    always_make_set = 1;
+     unsigned int i;
+     if(strcmp(xml_output->list[0],"-")==0)
+     	{
+     	fprintf(stderr,"Cannot write xml to stdout\n"); die (MAKE_FAILURE);
+     	}
+     else
+     	{
+	    xml_file = fopen(xml_output->list[0],"w");
+	    if( xml_file == NULL)
+		 	{
+		 	fprintf(stderr,"Cannot open %s %s\n",xml_output->list[0],strerror(errno));
+		 	die (MAKE_FAILURE);
+		 	}
+	    }
+     }
+
+
 #ifndef VMS
   /* Set the "MAKE_COMMAND" variable to the name we were invoked with.
      (If it is a relative pathname with a slash, prepend our directory name
@@ -2540,6 +2575,13 @@
       O (error, NILF,
          _("warning:  Clock skew detected.  Your build may be incomplete."));
 
+    if(xml_file != NULL)
+    	{
+    	extern void xml_finalize(FILE*);
+    	xml_finalize(xml_file);
+    	fclose(xml_file);
+    	}
+
     /* Exit.  */
     die (makefile_status);
   }
--- make-4.1/original/Makefile.am	2015-07-24 14:26:58.854270480 +0200
+++ make-4.1/make-4.1/Makefile.am	2015-07-24 14:27:17.626363573 +0200
@@ -43,6 +43,7 @@
 		function.c getopt.c getopt1.c guile.c implicit.c job.c load.c \
 		loadapi.c main.c misc.c output.c read.c remake.c rule.c \
 		signame.c strcache.c variable.c version.c vpath.c hash.c \
+		xml.c \
 		$(remote)
 
 EXTRA_make_SOURCES = vmsjobs.c remote-stub.c remote-cstms.c
--- make-4.1/original/xml.c	1970-01-01 01:00:00.000000000 +0100
+++ make-4.1/make-4.1/xml.c	2015-07-27 10:04:52.314547802 +0200
@@ -0,0 +1,286 @@
+
+#include "xml.h"
+
+#define EXIT_WITH_ERROR do { fprintf(stderr,"Exiting %s %d\n",__FILE__,__LINE__);exit(-1);} while(0)
+
+typedef struct Node
+	{
+	int id;
+	const char* name;
+	int phony;
+	int precious;
+	size_t n_prerequisites;
+	struct Node** prerequisites;
+	size_t n_statements;
+	char** statements;
+	}Node,*NodePtr;
+
+
+static NodePtr NodeNew()
+	{
+	NodePtr p=(NodePtr)calloc(1,sizeof(Node));
+	if(p==NULL) EXIT_WITH_ERROR;
+	return p;
+	}
+
+static NodePtr the_root = NULL;
+
+static void NodeFree(NodePtr p)
+	{
+	size_t i;
+	if(p==NULL) return;
+	if(p == the_root)
+		{
+		for(i=0;i< p->n_prerequisites;++i)
+			{
+			NodeFree(p->prerequisites[i]);
+			}
+		}
+	free(p->prerequisites);
+	for(i=0;i< p->n_statements;++i)
+			{
+			free(p->statements[i]);
+			}
+	free(p->statements);
+	free(p);
+	}
+
+static NodePtr RootFindNodeByName(const char* name)
+	{
+	NodePtr childptr=NULL;
+	if( the_root == NULL) the_root = NodeNew();
+	size_t i;
+	for(i=0;i< the_root->n_prerequisites;++i)
+		{
+		if(strcmp(the_root->prerequisites[i]->name,name)==0)
+			{
+			return the_root->prerequisites[i];
+			}
+		}
+	//not found, add it
+	childptr = NodeNew();
+	childptr->id = (int)the_root->n_prerequisites+1;
+	childptr->name = strdup(name);
+	if( childptr->name ==NULL ) EXIT_WITH_ERROR;
+	
+	
+	
+	the_root->prerequisites =  (NodePtr*)realloc(
+		the_root->prerequisites,
+		sizeof(NodePtr)*(the_root->n_prerequisites+1)
+		);
+	if( the_root->prerequisites == NULL) EXIT_WITH_ERROR;
+	the_root->prerequisites[the_root->n_prerequisites]=childptr;
+	the_root->n_prerequisites++;
+	return childptr;
+	}
+
+NodePtr FindNodeByName(NodePtr node,const char* name)
+	{
+	size_t i=0;
+	NodePtr childptr=NULL;
+	for(i=0;i< node->n_prerequisites;++i)
+		{
+		if(strcmp(node->prerequisites[i]->name,name)==0)
+			{
+			return node->prerequisites[i];
+			}
+		}
+	//not found, add it
+	childptr = RootFindNodeByName(name);
+	
+	node->prerequisites =  (NodePtr*)realloc(
+		node->prerequisites,
+		sizeof(NodePtr)*(node->n_prerequisites+1)
+		);
+	if( node->prerequisites == NULL) EXIT_WITH_ERROR;
+	node->prerequisites[node->n_prerequisites]=childptr;
+	node->n_prerequisites++;
+	return childptr;
+	}
+
+
+static void escape_xml_str(FILE* out,const char* s)
+	{
+	unsigned int i=0;
+	while(s[i]!=0)
+		{
+		switch(s[i])
+			{
+			case '<': fputs("&lt;",out); break;
+			case '>': fputs("&gt;",out); break;
+			case '&': fputs("&amp;",out); break;
+			case '\'': fputs("&apos;",out); break;
+			case '\"': fputs("&quot;",out); break;
+			default: fputc(s[i],out);break;
+			}
+		++i;
+		}
+	}
+
+static size_t n_meta=0UL;
+static struct NodeMetadata* all_meta=NULL;
+
+
+NodeMetadataPtr xml_find_metadata(const char* name,int create_if_missing)
+	{
+	size_t i=0;
+	if( xml_file == NULL) return NULL;
+	for(i=0;i< n_meta;++i)
+		{
+		if( strcmp(name, (const char*)all_meta[i].name)==0)
+			return &(all_meta[i]);
+		}
+	if( create_if_missing !=1 ) return NULL;
+	//add statements
+		all_meta =  (struct NodeMetadata*)realloc(
+			all_meta,
+			sizeof(struct NodeMetadata)*( n_meta+1)
+			);
+	if( all_meta ==NULL)  EXIT_WITH_ERROR;
+	all_meta[n_meta].name =  xstrdup(name);
+	all_meta[n_meta].desc = NULL;
+	all_meta[n_meta].n_core = -1;
+	all_meta[n_meta].n_proc = -1;
+	n_meta++;
+	return &(all_meta[n_meta-1]);
+ 	}
+
+void xml_description(const char* target,const char* description)
+	{
+	NodeMetadataPtr newdesc = NULL;
+	
+	if(xml_file==NULL  || target==NULL || strlen(target)==0 || 
+		description==NULL || strlen(description)==0 )
+		{
+		return;
+		}
+	
+	newdesc = xml_find_metadata(target,1);
+	if( newdesc == NULL) return;
+	if( newdesc->desc != NULL )
+		{
+		free( newdesc->desc);
+		}
+	newdesc->desc = xstrdup(description);
+	}
+
+
+static void NodePrint(FILE* out,NodePtr node)
+	{
+	size_t i=0;
+	NodeMetadataPtr meta =  xml_find_metadata(node->name,0);
+	
+	fputs("<target",out);
+	
+		fputs(" name=\"",out);
+		escape_xml_str(out,node->name);
+		fputc('"',out);
+	
+	fputs(" description=\"",out);
+	if(meta != NULL && meta->desc!=NULL)
+		{
+		escape_xml_str(out,meta->desc);
+		}
+	else
+		{
+		escape_xml_str(out,node->name);
+		}
+	fputc('"',out);
+	
+	fprintf(out," id=\"%d\"",node->id);
+	fprintf(out," precious=\"%d\"",node->precious);
+	fprintf(out," phony=\"%d\"",node->phony);
+	
+	if( meta!=NULL && meta->n_core>0)
+		{
+		fprintf(out," core=\"%d\"",meta->n_core);
+		}
+	if( meta!=NULL && meta->n_proc>0)
+		{
+		fprintf(out," proc=\"%d\"",meta->n_proc);
+		}
+	
+	fputs(">\n",xml_file);
+	
+	if(node->n_prerequisites>0)
+		{
+		fputs("  <prerequisites>\n",out);
+		for(i=0; i< node->n_prerequisites;++i)
+			{
+			fputs("    <prerequisite name=\"",out);
+			escape_xml_str(out,node->prerequisites[i]->name);
+			fprintf(out,"\" ref=\"%d\"",node->prerequisites[i]->id);
+			fputs("/>\n",out);
+			}
+		fputs("  </prerequisites>\n",out);
+		}
+		
+	
+	
+	if(node->n_statements>0)
+		{
+		fputs("  <statements>\n",out);
+		for( i=0;i< node->n_statements;++i)
+			{
+			fputs("    <statement>",xml_file);
+			escape_xml_str(out,node->statements[i]);
+			fputs("</statement>\n",out);
+			}
+		fputs("  </statements>\n",out);
+		}
+	fputs("</target>\n",out);
+	}
+
+
+void xml_visit(struct child* child)
+	{
+	int i=0;
+	struct file* f = child->file;
+	struct dep* dep = f->deps;
+	NodePtr childptr=NULL;
+	if( xml_file == NULL) return;
+	//find node
+	childptr = RootFindNodeByName(child->file->name);
+	childptr->precious = f->precious;
+	childptr->phony = f->phony;
+	
+	
+	while( dep != NULL )
+		{
+		NodePtr depnode = FindNodeByName(childptr,dep->file->name);
+		depnode->phony = dep->file->phony;
+		dep = dep->next;
+		}
+				
+	for( i=0;i< child->file->cmds->ncommand_lines;++i)
+		{
+		//add statements
+		childptr->statements =  (char**)realloc(
+			childptr->statements,
+			sizeof(char*)*(childptr->n_statements+1)
+			);
+		
+		if( childptr->statements == NULL) EXIT_WITH_ERROR;
+		childptr->statements[childptr->n_statements]= strdup(child->command_lines[i]);
+		if( childptr->statements[childptr->n_statements] == NULL)  exit(EXIT_FAILURE);
+		childptr->n_statements++;
+		}
+	}
+
+void xml_finalize(FILE* out)
+	{
+	size_t i=0;
+	if( out == NULL ) return;
+	
+	fputs("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<make>\n",out);
+	for(i=0;the_root!=NULL && i< the_root->n_prerequisites;++i)
+		{
+		NodePrint(out,the_root->prerequisites[i]);
+		}
+	fputs("</make>\n",out);
+    fflush(out);
+	}
+
+
+
--- make-4.1/original/xml.h	1970-01-01 01:00:00.000000000 +0100
+++ make-4.1/make-4.1/xml.h	2015-07-27 09:43:57.220324127 +0200
@@ -0,0 +1,25 @@
+#ifndef LOG_H
+#define LOG_H
+#include "makeint.h"
+#include "job.h"
+#include "filedef.h"
+#include "commands.h"
+#include "variable.h"
+#include "debug.h"
+#include "dep.h"
+extern FILE* xml_file;
+
+void xml_visit(struct child*);
+void xml_finalize(FILE*);
+void xml_description(const char*,const char*);
+
+typedef struct NodeMetadata
+	{
+	char* name;
+	char* desc;
+	int n_proc, n_core;
+	}NodeMetadata,*NodeMetadataPtr;
+
+NodeMetadataPtr xml_find_metadata(const char* name,int create_if_missing);
+
+#endif
--- make-4.1/original/file.c	2015-07-24 14:26:58.846270444 +0200
+++ make-4.1/make-4.1/file.c	2015-07-24 14:27:17.626363573 +0200
@@ -139,6 +139,9 @@
   return f;
 }
 
+
+
+
 /* Look up a file record for file NAME and return it.
    Create a new record if one doesn't exist.  NAME will be stored in the
    new record so it should be constant or in the strcache etc.
@@ -186,6 +189,8 @@
   new->name = new->hname = name;
   new->update_status = us_none;
 
+
+
   if (HASH_VACANT (f))
     {
       new->last = new;
